const fs = require("fs");
const path = require("path");
const baseDir = path.join(__dirname, "..");
const ensureDir = (dir) => { if (!fs.existsSync(dir)) { fs.mkdirSync(dir, { recursive: true }); } };

const MAP_SCREEN = 'import React, { useState, useEffect } from "react";\nimport { View, Text, StyleSheet, TouchableOpacity, Alert } from "react-native";\nimport MapView, { Marker, Polyline } from "react-native-maps";\nimport * as Location from "expo-location";\nimport AppHeader from "../../../components/app-header";\nimport { getMockTracking } from "../../../services/mockData";\n\nexport default function CustomerMap() {\n  const [tracking, setTracking] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [isTracking, setIsTracking] = useState(true);\n\n  useEffect(() => {\n    loadData();\n    requestLocation();\n  }, []);\n\n  const loadData = () => {\n    const data = getMockTracking();\n    setTracking(data);\n  };\n\n  const requestLocation = async () => {\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== "granted") {\n        Alert.alert("Permission Denied", "Location permission is required.");\n        return;\n      }\n      const location = await Location.getCurrentPositionAsync({});\n      setUserLocation({ lat: location.coords.latitude, lng: location.coords.longitude });\n    } catch (error) {\n      console.error("Location error:", error);\n    }\n  };\n\n  if (!tracking) {\n    return (\n      <View style={styles.container}>\n        <AppHeader />\n        <View style={styles.loading}>\n          <Text>Loading map...</Text>\n        </View>\n      </View>\n    );\n  }\n\n  const region = {\n    latitude: userLocation?.lat || tracking.userLocation.lat,\n    longitude: userLocation?.lng || tracking.userLocation.lng,\n    latitudeDelta: 0.05,\n    longitudeDelta: 0.05,\n  };\n\n  return (\n    <View style={styles.container}>\n      <AppHeader />\n      <MapView style={styles.map} initialRegion={region}>\n        <Marker coordinate={{ latitude: userLocation?.lat || tracking.userLocation.lat, longitude: userLocation?.lng || tracking.userLocation.lng }} title="You" pinColor="blue" />\n        {isTracking && (\n          <>\n            <Marker coordinate={{ latitude: tracking.truck.lat, longitude: tracking.truck.lng }} title="Waste Truck">\n              <View style={styles.truckMarker}>\n                <Text style={styles.truckIcon}></Text>\n              </View>\n            </Marker>\n            <Polyline coordinates={tracking.route.map((p) => ({ latitude: p.lat, longitude: p.lng }))} strokeColor="#16A34A" strokeWidth={4} />\n          </>\n        )}\n      </MapView>\n      {isTracking && <View style={styles.etaChip}><Text style={styles.etaText}> ETA: {tracking.etaMinutes} min</Text></View>}\n      <TouchableOpacity style={[styles.trackButton, isTracking && styles.trackButtonActive]} onPress={() => setIsTracking(!isTracking)}>\n        <Text style={[styles.trackButtonText, isTracking && { color: "#FFF" }]}>{isTracking ? " Tracking" : "Start Tracking"}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: "#F3F4F6" },\n  loading: { flex: 1, justifyContent: "center", alignItems: "center" },\n  map: { flex: 1 },\n  truckMarker: { backgroundColor: "#FFF", padding: 8, borderRadius: 20, borderWidth: 2, borderColor: "#16A34A" },\n  truckIcon: { fontSize: 24 },\n  etaChip: { position: "absolute", top: 100, left: 20, right: 20, backgroundColor: "#16A34A", padding: 16, borderRadius: 12, shadowColor: "#000", shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.3, shadowRadius: 8, elevation: 5 },\n  etaText: { color: "#FFF", fontSize: 16, fontWeight: "bold", textAlign: "center" },\n  trackButton: { position: "absolute", bottom: 40, left: 20, right: 20, backgroundColor: "#FFF", padding: 16, borderRadius: 12, borderWidth: 2, borderColor: "#16A34A" },\n  trackButtonActive: { backgroundColor: "#16A34A" },\n  trackButtonText: { fontSize: 16, fontWeight: "bold", textAlign: "center", color: "#16A34A" },\n});';

const file1 = path.join(baseDir, "app", "(tabs)", "customer", "map.jsx");
ensureDir(path.dirname(file1));
fs.writeFileSync(file1, MAP_SCREEN);
console.log(" Created: map.jsx");
